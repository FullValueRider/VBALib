VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "SeqL"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_Description = "SeqL is a multipurpose Collection/ArrayList replacement.  It uses a double linked list to store the items.  Items are access using a 1 based index. For a Keyed collection, use one of the Kvp classes"
'@PredeclaredId
'@Exposed
'@Folder("Seq")
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C

'@ModuleDescription("SeqL is a multipurpose Collection/ArrayList replacement.  It uses a double linked list to store the items.  Items are access using a 1 based index. For a Keyed collection, use one of the Kvp classes")
' SeqH uses the VBA Collection class as a host for the items
' Other versions of SeqL are available (SeqA, SeqAL, SeqL, SeqLH, SeqT)

' Seq classes do not implement NewEnum because not all classes support such a method.
' Instead the use of the iteritems class is promoted for a superior for each experiece.

Option Explicit

Private Const MY_TYPENAME                       As String = "SeqL"
Private Const FIRST_INDEX                       As Long = 1

Private Type Host
    Count                                       As Long
End Type


Private Type State

    Root                                        As SeqLNode
    Last                                        As SeqLNode
    Host                                        As Host ' emulates the Host object in other seQ
   
End Type


Private s                                       As State

' Deb is a Factory method of the PredeclaredId which returns a new instance of SeqL
'=================================================================================
' The input for Deb is a ParamArray.
' The ParamArray is interpreted according to the folowing rules
' If the ParamArray contains no Items
' - A empty SeqLuence (count = 0)
' If the ParamArray has 2 or more items
' - A SeqL of size equal to the ParamArray, items as generated by for each over the ParamArray
' If the ParamArray has a single Item
' - Number: SeqL with specified capacity with each Item being the Value 'Empty'
' - String: A SeqL whose capacity is the length of the string with one character per Item
' - Array: SeqL of items as provided by For Each over the array.  Multidimension arrays are flattened but the position in the original array can be calculated by the user if required. See also Bind
' - Dictionaries: a SeqL of key/value arrays as generated from for each on the Keys array.
' - Collection: The collection is copied to the Host collection.  There is no refererence link to the original collection (See Host Property)
' - SeqL: Items as generated by for each on the SeqL
' - mscorlib Arraylist: Items as generated by for each on the arrylist
' - mscorlib Stack: Items as generated by for each on the stack
' - mscorlib Queue: Items as generated by for eac on the queue


'@DefaultMember
Public Function Deb(ParamArray ipParamarray() As Variant) As SeqL
Attribute Deb.VB_UserMemId = 0
    
    With New SeqL
        Set Deb = .ConstructInstance(VBA.CVar(ipParamarray))
    End With
   
End Function


Friend Function ConstructInstance(ByRef ipFPA As Variant) As SeqL
      
    Set s.Root = Nothing
    Set s.Last = s.Root
    
    ' Check to see if we return a default 'empty' seq
    If ArrayOp.LacksItems(ipFPA) Then
        Set ConstructInstance = Me
        Exit Function
    End If
    
    ' ipParamArray contains one or more items depending on the input type.
    ' if the input contains only a single item we want to use that item
    ' else we want to treat the forwrded paramarray as a single array item
    
    Dim myItem As Variant
    If ArrayOp.HoldsOneItem(ipFPA) Then
        If VBA.IsObject(ipFPA(0)) Then
            Set myItem = ipFPA(0)
        Else
            myItem = ipFPA(0)
        End If
    Else
        myItem = ipFPA
    End If
    
    ' Resolve the items in the forwarded paramarray using the rules for
    ' instantiation as described above.
    Select Case True
    
        Case VBA.IsArray(myItem):               Set ConstructInstance = AddRange(ArrayOp.Linearise(myItem))
        Case GroupInfo.IsContainer(myItem):     Set ConstructInstance = AddRange(myItem)
        Case GroupInfo.IsString(myItem):        Set ConstructInstance = AddRange(myItem)
        Case GroupInfo.IsNumber(myItem):        Set ConstructInstance = ConstructInstanceByCount(VBA.CLng(myItem))
        Case Else:                              Set ConstructInstance = AddItems(myItem)
    End Select

End Function


Private Function ConstructInstanceByCount(ByRef ipSize As Long) As SeqL
    
    If ipSize < FIRST_INDEX Then
        Set ConstructInstanceByCount = Me
        Exit Function
    End If
    
    Dim myCount As Long
    For myCount = FIRST_INDEX To ipSize
        Me.Add Empty
    Next
    
    Set ConstructInstanceByCount = Me
    
End Function


' There is no bind method for SeqL as such action
' is not supported by the Host item s.root
' i.e. Bind exists to allow an existing type to make use
' of seq capabilities e.g. bining ensure that changes are refected
' in the bound object object

Public Function Clone() As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb

    If s.Root Is Nothing Then
        Set Clone = myS
        Exit Function
    End If

    Dim myNode As SeqLNode: Set myNode = s.Root

    Do
        myS.Add myNode.Item
        Set myNode = myNode.Succ
    Loop Until myNode Is Nothing

    Set Clone = myS

End Function


'@Description("Counts number of host items equal to ipItem.  For other condition use CountIt with the appropriate comparer")
Public Function Count(Optional ByRef ipItem As Variant) As Long
Attribute Count.VB_Description = "Counts number of host items equal to ipItem.  For other condition use CountIt with the appropriate comparer"

    If s.Root Is Nothing Then
        Count = -1
        Exit Function
    End If
    
    If VBA.IsMissing(ipItem) Then
        Count = s.Host.Count
        Exit Function
    End If

    Dim myCount As Long: myCount = 0

    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
            myCount = myCount + 1
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

    Count = myCount

End Function


Public Function Items() As Variant

    If s.Root Is Nothing Then
        Items = Array()
        Exit Function
    End If
    
    Items = Me.ToArray
    
End Function




'@Description("Returns a subset of the SeqL")
Public Function Slice _
( _
Optional ByRef ipStart As Long = 1, _
Optional ByRef ipRun As Long = -1, _
Optional ByRef ipStep As Long = 1 _
) As SeqL
Attribute Slice.VB_Description = "Returns a subset of the SeqL"

    If s.Root Is Nothing Then
        Set Slice = SeqL.Deb
        Exit Function
    End If

    GuardIndexOutOfBounds ipStart, FIRST_INDEX, s.Host.Count, "SeqL.Slice"

    Dim myRun As Long
    myRun = ipRun
    If myRun < FIRST_INDEX Then
        myRun = s.Host.Count - ipStart + 1
    Else
        GuardIndexOutOfBounds myRun + ipStart - 1, FIRST_INDEX, s.Host.Count, "SeqL.Slice"
    End If

    Dim myS As SeqL: Set myS = SeqL.Deb

    Dim mySeqIndex As Long
    For mySeqIndex = ipStart To ipStart + myRun - 1 Step ipStep
        myS.Add Me.Item(mySeqIndex)
    Next

    Set Slice = myS

End Function


'@Description("Returns a shallow copy of the SeqL as an Array.  The Lbound of the array is 1")
Public Function ToArray() As Variant
Attribute ToArray.VB_Description = "Returns a shallow copy of the SeqL as an Array.  The Lbound of the array is 1"

    If s.Root Is Nothing Then
        ToArray = Array()
        Exit Function
    End If

    Dim myA As Variant
    ReDim myA(FIRST_INDEX To s.Host.Count)

    Dim myNode As SeqLNode: Set myNode = s.Root

    Dim myIndex As Long: myIndex = 0
    Do While myIndex < s.Host.Count
    
        myIndex = myIndex + 1
        
        If VBA.IsObject(myNode.Item) Then
            Set myA(myIndex) = myNode.Item
        Else
            myA(myIndex) = myNode.Item
        End If

        Set myNode = myNode.Succ
        
    Loop

    ToArray = myA

End Function

'@Description("Returns a shallow copy of the SeqL as a VBA collection")
Public Function ToCollection() As Collection
Attribute ToCollection.VB_Description = "Returns a shallow copy of the SeqL as a VBA collection"

    Dim myC As Collection: Set myC = New Collection
    
    If s.Root Is Nothing Then
        Set ToCollection = myC
        Exit Function
    End If

    Dim myNode As SeqLNode: Set myNode = s.Root

    Do
        myC.Add myNode.Item
        Set myNode = myNode.Succ
    Loop Until myNode Is Nothing

    Set ToCollection = myC

End Function


'@Description("Returns the Host of the first Index")
Public Function FirstIndex() As Long
Attribute FirstIndex.VB_Description = "Returns the Host of the first Index"

    If s.Root Is Nothing Then
        FirstIndex = -1
    Else
        FirstIndex = FIRST_INDEX
    End If

End Function


'@Description("Returns the UBound of the SeqL or -1 if the SeqL is empty.  Equivalent to Count.")
Public Function LastIndex() As Long
Attribute LastIndex.VB_Description = "Returns the UBound of the SeqL or -1 if the SeqL is empty.  Equivalent to Count."

    If s.Root Is Nothing Then
        LastIndex = -1
    Else
        LastIndex = s.Host.Count
    End If

End Function


'@Description("Returns the index of the second item in the SeqL or -1  if the SeqL has less than 2 Items")
Public Function FBOIndex() As Long
Attribute FBOIndex.VB_Description = "Returns the index of the second item in the SeqL or -1  if the SeqL has less than 2 Items"

    If s.Root Is Nothing Then
        FBOIndex = -1
    ElseIf s.Root.Succ Is Nothing Then
        FBOIndex = -1
    Else
        FBOIndex = FIRST_INDEX + 1
    End If
    
End Function


'Description("Returns the index of the second to last item in the SeqL, or -1 if the SeqL has lees than 2 items")
Public Function LBOIndex() As Long

    If s.Root Is Nothing Then
        LBOIndex = -1
    ElseIf s.Last.Pred Is Nothing Then
        LBOIndex = -1
    Else
        LBOIndex = s.Host.Count - 1
    End If
   
End Function





'@Description("Returns the item at FirstIndex")
Public Property Get First() As Variant
Attribute First.VB_Description = "Returns the item at FirstIndex"

    If s.Root Is Nothing Then
        First = Null
        Exit Property
    End If

    If VBA.IsObject(s.Root.Item) Then
        Set First = s.Root.Item
    Else
        First = s.Root.Item
    End If

End Property


'@Description("Assigns to the Item at FirstIndex")
Public Property Let First(ByVal ipItem As Variant)
Attribute First.VB_Description = "Assigns to the Item at FirstIndex"

    ' ToDo: review if the add action is better as an error
    If s.Root Is Nothing Then
        Me.Add ipItem
        Exit Property
    End If

    s.Root.Item = ipItem

End Property


'@Description("Assigns to the Item at FirstIndex")
Public Property Set First(ByVal ipItem As Variant)
Attribute First.VB_Description = "Assigns to the Item at FirstIndex"

    If s.Root Is Nothing Then
        Me.Add ipItem
        Exit Property
    End If

    Set s.Root.Item = ipItem

End Property


'@Description("Returns the Item at LastIndex")
Public Property Get Last() As Variant
Attribute Last.VB_Description = "Returns the Item at LastIndex"

    If s.Last Is Nothing Then
        Last = Null
        Exit Property
    End If
    
    If VBA.IsObject(s.Last.Item) Then
        Set Last = s.Last.Item
    Else
        Last = s.Last.Item
    End If

End Property


'@Description("Assigns to the Item at LastIndex")
Public Property Let Last(ByVal ipItem As Variant)
Attribute Last.VB_Description = "Assigns to the Item at LastIndex"

    If s.Last Is Nothing Then
        Me.Add ipItem
        Exit Property
    End If

    s.Last.Item = ipItem

End Property


'@Description("Assigns to the item at LastIndex")
Public Property Set Last(ByVal ipItem As Variant)
Attribute Last.VB_Description = "Assigns to the item at LastIndex"

    If s.Last Is Nothing Then
        Me.Add ipItem
        Exit Property
    End If

    Set s.Last.Item = ipItem
   
End Property


'@Description("Returns the item at First but one Index")
Public Property Get FBO() As Variant
Attribute FBO.VB_Description = "Returns the item at First but one Index"

    If s.Root Is Nothing Then
        FBO = Null
        Exit Property
    ElseIf s.Root.Succ Is Nothing Then
        FBO = Null
        Exit Property
    End If
    
    If VBA.IsObject(s.Root.Succ.Item) Then
        Set FBO = s.Root.Succ.Item
    Else
        FBO = s.Root.Succ.Item
    End If

End Property


'@Description("Assigns to the Item at First but one Index")
Public Property Let FBO(ByVal ipItem As Variant)
Attribute FBO.VB_Description = "Assigns to the Item at First but one Index"

    If s.Root Is Nothing Then
        Err.Raise 17 + vbObjectError, _
            "SeqL.Let_FBO", _
            Fmt.Text("Index {0} not avaiable", FIRST_INDEX + 1)
    ElseIf s.Host.Count = FIRST_INDEX Then
        Me.Add ipItem
    Else
        s.Root.Succ.Item = ipItem
    End If

End Property


'@Description("Assigns to the Item at First but one Index")
Public Property Set FBO(ByVal ipItem As Variant)
Attribute FBO.VB_Description = "Assigns to the Item at First but one Index"

    If s.Root Is Nothing Then
        Err.Raise 17 + vbObjectError, _
            "SeqL.Let_FBO", _
            Fmt.Text("Index {0} not avaiable", FirstIndex + 1)
    ElseIf s.Host.Count = FIRST_INDEX Then
        Me.Add ipItem
    Else
        Set s.Root.Succ.Item = ipItem
    End If

End Property


'@Description("Returns the Item at Lastbut one Index")
Public Property Get LBO() As Variant
Attribute LBO.VB_Description = "Returns the Item at Lastbut one Index"

    If s.Last Is Nothing Then
        LBO = Null
        Exit Property
    ElseIf s.Last.Pred Is Nothing Then
        LBO = Null
        Exit Property
    End If
    
    If VBA.IsObject(s.Last.Pred.Item) Then
        Set LBO = s.Last.Pred.Item
    Else
        LBO = s.Last.Pred.Item
    End If

End Property


'@Description("Assigns to the Item at Last but one Index")
Public Property Let LBO(ByVal ipItem As Variant)
Attribute LBO.VB_Description = "Assigns to the Item at Last but one Index"

    If s.Root Is Nothing Then
        Err.Raise 17 + vbObjectError, _
            "SeqL.Let_FBO", _
            Fmt.Text("Index {0} not avaiable", s.Host.Count - 1)
    ElseIf s.Last.Pred Is Nothing Then
        Me.InsertAt ipItem, FIRST_INDEX
    Else
        s.Last.Pred.Item = ipItem
    End If

End Property


'@Description("Assigns to the item at Last but one Index")
Public Property Set LBO(ByVal ipItem As Variant)
Attribute LBO.VB_Description = "Assigns to the item at Last but one Index"

    If s.Root Is Nothing Then
        Err.Raise 17 + vbObjectError, _
            "SeqL.Let_FBO", _
            Fmt.Text("Index {0} not avaiable", s.Host.Count - 1)
    ElseIf s.Last.Pred Is Nothing Then
        Me.InsertAt ipItem, FIRST_INDEX
    Else
        s.Last.Pred.Item = ipItem
    End If

End Property


Public Function IndexOf _
( _
    ByVal ipItem As Variant, _
    Optional ByVal ipStart As Long = 1, _
    Optional ByVal ipRun As Long = 0 _
) As Long
    
    IndexOf = -1
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    If ipStart < FIRST_INDEX Or ipStart > s.Host.Count Then
        Exit Function
    End If
    
    ' ensure that ipstart+iprun only goes to the end of the seq
    Dim myEnd As Long
    If ipRun = 0 Then
        myEnd = s.Host.Count
    Else
        myEnd = ipStart + ipRun - 1
        If myEnd > s.Host.Count Then
            myEnd = s.Host.Count
        End If
    End If
    
    ' we could use Iteritems here with the host being the instance of Me
    ' but that might lead to recursive references at some later stage.
    Dim myNode As SeqLNode: Set myNode = GetNodeAt(ipStart)
    
    Dim myCount As Long
    For myCount = ipStart To myEnd
        
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
            IndexOf = myCount
            Exit Function
        End If
        
        Set myNode = myNode.Succ
    
    Next
    
End Function


Public Function LastIndexOf _
( _
ByVal ipItem As Variant, _
Optional ByVal ipStart As Long = 1, _
Optional ByVal ipRun As Long = 0 _
) As Long

    LastIndexOf = -1
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    If ipStart < FIRST_INDEX Or ipStart > s.Host.Count Then
        Exit Function
    End If
    
    ' ensure that ipstart+iprun only goes to the end of the seq
    Dim myEnd As Long
    If ipRun = 0 Then
        myEnd = s.Host.Count
    Else
        myEnd = ipStart + ipRun - 1
        If myEnd > s.Host.Count Then
            myEnd = s.Host.Count
        End If
    End If
    
    'cannot use Iteritems unless we convert managing nodes into managing a list object
    ' which is probably not worth the effort as it will duplicate Seq classes
    Dim myNode As SeqLNode: Set myNode = GetNodeAt(myEnd)
    
    Dim myCount As Long
    For myCount = myEnd To ipStart Step -1
        
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
            LastIndexOf = myCount
            Exit Function
        End If
        
        Set myNode = myNode.Pred
    
    Next
    
    LastIndexOf = -1
    
End Function


'@Description("Add a single item.  Returns the index at which the item was added for compatibility with the mscorlib ArrayList.")
Public Function Add(ByRef ipItem As Variant) As Long
Attribute Add.VB_Description = "Add a single item.  Returns the index at which the item was added for compatibility with the mscorlib ArrayList."

    s.Host.Count = s.Host.Count + 1
    Add = s.Host.Count
    
    Dim myNode As SeqLNode: Set myNode = SeqLNode(Nothing, Nothing, ipItem)
    
    If s.Root Is Nothing Then
        Set s.Root = myNode
        Set s.Last = s.Root
        Exit Function
    End If
     
    AppendNode myNode
    
End Function


'@Description("Add Items in the paramarray to the  )
Public Function AddItems(ParamArray ipParamarray() As Variant) As SeqL

    If ArrayOp.LacksItems(VBA.CVar(ipParamarray)) Then
        Set AddItems = Me
        Exit Function
    End If

    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)

    AddRange myParamarray

    Set AddItems = Me

End Function


'@Description("Add an array,  list type, dictionary type, or characters of a string")
Public Function AddRange(ByVal ipRange As Variant) As SeqL
Attribute AddRange.VB_Description = "Add an array,  list type, dictionary type, or characters of a string"

    Set AddRange = Me
    
     If GroupInfo.IsNotContainer(ipRange) And GroupInfo.IsNotString(ipRange) Then
        Err.Raise 17 + vbObjectError, _
            "VBALib.SeqL.AddRange", _
            Fmt.Text("Expecting a container type.  Got {0}", VBA.TypeName(ipRange))
    End If
    
    Dim myItems As IterItems: Set myItems = IterItems(ipRange)
    
    If myItems.LacksItems Then
        Exit Function
    End If
    
    Do
        If GroupInfo.IsDictionary(ipRange) Then
            Me.Add Array(myItems.CurKey(0), myItems.CurItem(0))
        Else
            Me.Add myItems.CurItem(0)
        End If
        
    Loop While myItems.MoveNext
    
End Function


Public Property Get Item(ByVal ipIndex As Long) As Variant

    Item = Null
    
    If ipIndex < FIRST_INDEX Or ipIndex > s.Host.Count Then
        Exit Property
    End If

    Dim myNode As SeqLNode: Set myNode = GetNodeAt(ipIndex)

    If VBA.IsObject(myNode.Item) Then
        Set Item = myNode.Item
    Else
        Item = myNode.Item
    End If

End Property


Public Property Let Item(ByVal ipIndex As Long, ByVal ipItem As Variant)

    GuardIndexOutOfBounds ipIndex, FIRST_INDEX, s.Host.Count, "SeqL.Let_Item"

    Dim myNode As SeqLNode: Set myNode = GetNodeAt(ipIndex)
    myNode.Item = ipItem

End Property


Public Property Set Item(ByVal ipIndex As Long, ByVal ipItem As Variant)

    GuardIndexOutOfBounds ipIndex, FIRST_INDEX, s.Host.Count, "SeqL.Set_Item"

    Dim myNode As SeqLNode: Set myNode = GetNodeAt(ipIndex)
    Set myNode.Item = ipItem

End Property


Public Function InsertAt(ByVal ipIndex As Long, ByVal ipItem As Variant) As Long

    If ipIndex < FIRST_INDEX Or ipIndex > s.Host.Count Then
        InsertAt = -1
        Exit Function
    End If

    Dim myNewNode As SeqLNode: Set myNewNode = SeqLNode(Nothing, Nothing, ipItem)
    
    If ipIndex = FIRST_INDEX Then
        PrependNode myNewNode
    ' ElseIf ipIndex = s.Host.Count Then
    '     AppendNode myNewNode
    Else
        InsertNode ipIndex, myNewNode
    End If
    
    s.Host.Count = s.Host.Count + 1
    InsertAt = ipIndex

End Function


'
Public Function InsertAtItems(ByVal ipIndex As Long, ParamArray ipParamarray() As Variant) As SeqL
    
    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)
    
    Set InsertAtItems = InsertAtRange(ipIndex, myParamarray)
    
End Function


Public Function InsertAtRange(ByVal ipIndex As Long, ByRef ipRange As Variant) As SeqL

    If ipIndex < FIRST_INDEX Or ipIndex > s.Host.Count Then
        Set InsertAtRange = Me
        Exit Function
    End If

    GuardInvalidRangeItem ipRange, "SeqL.InsertAtRange"
    
    Dim myItems As IterItems: Set myItems = IterItems(ipRange).MoveToEndIndex
    
    If myItems.LacksItems Then
        Set InsertAtRange = Me
        Exit Function
    End If
    
    Do
    
        If GroupInfo.IsDictionary(ipRange) Then
            InsertAt ipIndex, Array(myItems.CurKey(0), myItems.CurItem(0))
        Else
            InsertAt ipIndex, myItems.CurItem(0)
        End If
   
    Loop While myItems.MovePrev
    
    Set InsertAtRange = Me
    
End Function


'@Description("Removes the first encountered item from the Seq")
Public Function Remove(ByRef ipItem As Variant) As Long
Attribute Remove.VB_Description = "Removes the first encountered item from the Seq"

    If s.Root Is Nothing Then
        Remove = -1
        Exit Function
    End If
    
    Dim myNodeInfo As KVPair: Set myNodeInfo = GetNodeInfo(ipItem)

    RemoveNode myNodeInfo.Item
        
    Remove = myNodeInfo.Key
    
End Function


'@Description "Removes the first encountered item from the Seq for each item in the ParamArray"
Public Function RemoveItems(ParamArray ipParamarray() As Variant) As SeqL
Attribute RemoveItems.VB_Description = "Removes the first encountered item from the Seq for each item in the ParamArray"

    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)
    
    Set RemoveItems = RemoveRange(myParamarray)
    
    Set RemoveItems = Me
    
End Function


'@Description("Remove items in the specified range of Indexes")
Public Function RemoveRange(ByRef ipRange As Variant) As SeqL
Attribute RemoveRange.VB_Description = "Remove items in the specified range of Indexes"

    Set RemoveRange = Me
    
    If s.Root Is Nothing Then
        Exit Function
    End If

    Dim myItems As IterItems: Set myItems = IterItems(ipRange)
    
    If myItems.LacksItems Then
        Exit Function
    End If
    
    Do
        RemoveNode GetNodeInfo(myItems.CurItem(0)).Item
    Loop While myItems.MoveNext
    
    Set RemoveRange = Me
    
End Function

Public Function RemoveAll(ParamArray ipParamarray() As Variant) As SeqL

    Set RemoveAll = Me
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    If ArrayOp.LacksItems(VBA.CVar(ipParamarray)) Then
        RemoveAllItems
        Exit Function
    End If
    
    Dim myParam As Variant
    For Each myParam In ipParamarray
        RemoveAllSingleItem myParam
    Next
    
    Set RemoveAll = Me

End Function


'@Description("Removes all Items from the SeqL")
Public Function Clear() As SeqL
Attribute Clear.VB_Description = "Removes all Items from the SeqL"
    Set Clear = RemoveAll
End Function


'@Description("Removes all Items by replacing the Host collection with a new collection")
Public Function Reset() As SeqL
Attribute Reset.VB_Description = "Removes all Items by replacing the Host collection with a new collection"
    Set Reset = RemoveAll
End Function


'@Description("Removes node at the specified index")
Public Function RemoveAt(ByRef ipIndex As Long) As Long
Attribute RemoveAt.VB_Description = "Removes node at the specified index"

    RemoveAt = -1
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    If ipIndex < FIRST_INDEX Or ipIndex > s.Host.Count Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = GetNodeAt(ipIndex)
    
    RemoveNode myNode
    RemoveAt = ipIndex
    
End Function

'@Description("Removes the first encountered item from the SeqL")
Public Function RemoveIndexes(ParamArray ipParamarray() As Variant) As SeqL
Attribute RemoveIndexes.VB_Description = "Removes the first encountered item from the SeqL"

    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)
    
    Set RemoveIndexes = RemoveIndexesRange(myParamarray)
    
End Function





'@Description("Remove items in the specified range of Indexes. Indexes are sorted in reverse order before use")
Public Function RemoveIndexesRange(ByRef ipRange As Variant) As SeqL
Attribute RemoveIndexesRange.VB_Description = "Remove items in the specified range of Indexes. Indexes are sorted in reverse order before use"

    Set RemoveIndexesRange = Me
    
    If s.Root Is Nothing Then
        Exit Function
    End If

    ' We need to utilise Iteritems twice
    ' because we need to sort the values in ipRange

    Dim myS As SeqA: Set myS = SeqA(ipRange)
    
    If myS.LacksItems Then
        Exit Function
    End If
    
    myS.Sorted
    
    Dim myItems As IterItems: Set myItems = IterItems(myS).MoveToEndIndex
    Do
         RemoveNode GetNodeAt(myItems.CurItem(0))
    Loop While myItems.MovePrev
    
    Set RemoveIndexesRange = Me
    
End Function

Public Function Fill(ByRef ipItem As Variant, Optional ByVal ipCount As Long = 1) As SeqL

    Set Fill = Me
    
    If ipCount < 1 Then
        Exit Function
    End If

    Dim myCount As Long
    For myCount = 1 To ipCount
        Me.Add ipItem
    Next

End Function


'@Description("Returns the first N items of the SeqL, Default 1")
Public Function Head(Optional ByVal ipSplitAfter As Long = 1) As SeqL
Attribute Head.VB_Description = "Returns the first N items of the SeqL, Default 1"

    Set Head = SeqL.Deb
    
    If s.Host.Count <= FIRST_INDEX Then
        Exit Function
    End If

    If ipSplitAfter < FIRST_INDEX Then
        Exit Function
    End If

    If ipSplitAfter >= s.Host.Count Then
        Set Head = Me.Clone
        Exit Function
    End If

    Set Head = Me.Slice(FIRST_INDEX, ipSplitAfter)

End Function


'@Description("Returns the Items after SplitAfter, Default is Index 2")
Public Function Tail(Optional ByVal ipSplitAfter As Long = FIRST_INDEX) As SeqL
Attribute Tail.VB_Description = "Returns the Items after SplitAfter, Default is Index 2"

    Set Tail = SeqL.Deb
    
    If s.Host.Count < FIRST_INDEX Then
        Exit Function
    End If

    If ipSplitAfter >= s.Host.Count Then
        Exit Function
    End If
    
    If ipSplitAfter < FIRST_INDEX Then
        Set Tail = Me.Clone
        Exit Function
    End If

    Set Tail = Me.Slice(ipSplitAfter + 1)

End Function


Public Function HoldsItem(ByRef ipItem As Variant) As Boolean

    HoldsItem = False
     
    If s.Root Is Nothing Then
        Exit Function
    End If

    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
            HoldsItem = True
            Exit Function
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

End Function


Public Function Contains(ByRef ipItem As Variant) As Boolean
    Contains = Me.HoldsItem(ipItem)
End Function


Public Function LacksItem(ByRef ipItem As Variant) As Boolean
    LacksItem = Not Me.HoldsItem(ipItem)
End Function


Public Function HoldsItems() As Boolean
    HoldsItems = Not s.Root Is Nothing
End Function


Public Function LacksItems() As Boolean
    LacksItems = s.Root Is Nothing
End Function


Public Property Get myTypename() As String
    myTypename = MY_TYPENAME
End Property

'@Description("Mutates the SeqL in place by applying the function in IMapper to each item")
Public Function MappedIt(ByRef ipMapper As IMapper) As SeqL
Attribute MappedIt.VB_Description = "Mutates the SeqL in place by applying the function in IMapper to each item"
    'Mapped it works by reference but we allow a function return to enable fluid use of Mappedit
    
    Set MappedIt = Me

    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do

        Dim myItem As Variant: myItem = ipMapper.ExecMapper(myNode.Item)

        If VBA.IsObject(myItem(0)) Then
            Set myNode.Item = myItem(0)
        Else
            myNode.Item = myItem(0)
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

    Set MappedIt = Me

End Function

Public Function MapIt(ByVal ipMapper As IMapper) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set MapIt = myS

    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
        myS.Add ipMapper.ExecMapper(myNode.Item)(0)
        Set myNode = myNode.Succ
    Loop Until myNode Is Nothing
    
    Set MapIt = myS

End Function




'@Description("Returns a subset of the seq composed of items where IComparer was true")
Public Function FilterIt(ByVal ipComparer As IComparer) As SeqL
Attribute FilterIt.VB_Description = "Returns a subset of the seq composed of items where IComparer was true"

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set FilterIt = myS
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do

        If ipComparer.ExecCmp(myNode.Item) Then
            myS.Add myNode.Item
        End If

        Set myNode = myNode.Succ
    
    Loop Until myNode Is Nothing

  

End Function


'@Description("Returns the count of where ICOmparer is true. Does not generate an interim filtered seq"
Public Function CountIt(ByVal ipComparer As IComparer) As Long

    If s.Root Is Nothing Then
        CountIt = -1
        Exit Function
    End If
    
    Dim myCount As Long: myCount = 0
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do

        If ipComparer.ExecCmp(myNode.Item) Then
            myCount = myCount + 1
        End If

        Set myNode = myNode.Succ
    
    Loop Until myNode Is Nothing

    CountIt = myCount

End Function


'@Description("Returns a single Host based on the Reducer").
Public Function ReduceIt(ByRef ipReducer As IReducer) As Variant
    
    If s.Root Is Nothing Then
        ReduceIt = Null
        Exit Function
    End If
    
    Dim myItem As Variant: myItem = Array(ipReducer.ExecReduction(Me))

    If VBA.IsObject(myItem(0)) Then
        Set ReduceIt = myItem(0)
    Else
        ReduceIt = myItem(0)
    End If

End Function

Public Property Get TypeName() As String
    TypeName = MY_TYPENAME
End Property

Public Function Push(ParamArray ipParamarray() As Variant) As SeqL

    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)
    
    Set Push = AddRange(myParamarray)
    
End Function


Public Function PushRange(ByRef ipRange As Variant) As SeqL
    Set PushRange = AddRange(ipRange)
End Function


'@Description("Returns the last item of the seq.  Removes the last item of the seq")
Public Function Pop() As Variant
Attribute Pop.VB_Description = "Returns the last item of the seq.  Removes the last item of the seq"

    If s.Last Is Nothing Then
        Pop = Null
        Exit Function
    End If
    
    If VBA.IsObject(s.Last.Item) Then
        Set Pop = s.Last.Item
    Else
        Pop = s.Last.Item
    End If

    RemoveNode s.Last
    
    's.Host.Count = s.Host.Count - 1
    
End Function


Public Function PopRange(Optional ByVal ipCount As Long = 1) As SeqL

    Set PopRange = SeqL.Deb
    
    If ipCount < 1 Then
        Exit Function
    End If
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    

    If ipCount > s.Host.Count Then
        Set PopRange = Me.Reverse
        Me.RemoveAll
        Exit Function
    End If
    
    Dim myS As SeqL: Set myS = SeqL.Deb
    
    Dim myCount As Long
    For myCount = 1 To ipCount
        myS.Add Me.Pop
    Next
    
    Set PopRange = myS

End Function


Public Function enQueue(ParamArray ipParamarray() As Variant) As SeqL

    Dim myParamarray As Variant: myParamarray = ipParamarray
    myParamarray = ArrayOp.Splat(myParamarray)
    
    Set enQueue = AddRange(myParamarray)
    
End Function


Public Function EnqueueRange(ByRef ipRange As Variant) As SeqL
    Set EnqueueRange = AddRange(ipRange)
End Function


Public Function Dequeue() As Variant

    If s.Root Is Nothing Then
        Dequeue = Null
        Exit Function
    End If

    If VBA.IsObject(s.Root.Item) Then
        Set Dequeue = s.Root.Item
    Else
        Dequeue = s.Root.Item
    End If

    RemoveNode s.Root
    
End Function


Public Function DequeueRange(Optional ByVal ipCount As Long = 1) As SeqL

    Set DequeueRange = SeqL.Deb
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    If ipCount < 1 Then
        Exit Function
    End If

    If ipCount > s.Host.Count Then
        Set DequeueRange = Me.Clone
        Me.RemoveAll
        Exit Function
    End If
   
    Dim myS As SeqL: Set myS = SeqL.Deb
    
    Dim myIndex As Long
    For myIndex = 1 To ipCount
        myS.Add Me.Dequeue
    Next
    
    Set DequeueRange = myS
    
End Function


Public Function Sort() As SeqL

    Dim myS As SeqL: Set myS = Me.Clone
        
    If s.Host.Count < FIRST_INDEX Then
        Set Sort = myS
        Exit Function
    End If
        
    Sorters.ShakerSortByItem myS
    Set Sort = myS
    
End Function


Public Function Sorted() As SeqL

    If s.Host.Count < FIRST_INDEX Then
        Set Sorted = Me
        Exit Function
    End If
        
    Sorters.ShakerSortByItem Me
    Set Sorted = Me
    
End Function


'@Description("Swaps the Items at the specified indexes")
Public Sub Swap(ByRef ipLHSIndex As Long, ByRef ipRHSIndex As Long)
Attribute Swap.VB_Description = "Swaps the Items at the specified indexes"

    Dim myTemp As Variant
    
    If VBA.IsObject(Item(ipLHSIndex)) Then
        Set myTemp = Item(ipLHSIndex)
    Else
        myTemp = Item(ipLHSIndex)
    End If
    
    If VBA.IsObject(Item(ipRHSIndex)) Then
        Set Item(ipLHSIndex) = Item(ipRHSIndex)
    Else
        Item(ipLHSIndex) = Item(ipRHSIndex)
    End If
    
    If VBA.IsObject(myTemp) Then
        Set Item(ipRHSIndex) = myTemp
    Else
        Item(ipRHSIndex) = myTemp
    End If

End Sub


Public Function Reverse() As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set Reverse = myS
    
    If s.Host.Count < s.Host.Count Then
        Exit Function
    End If

    Dim myIndex As Long
    For myIndex = s.Host.Count To FIRST_INDEX Step -1
        myS.Add GetNodeAt(myIndex).Item
    Next
     
    Set Reverse = myS

End Function


'@Description("Reverses the seq in place")
Public Function Reversed() As SeqL
Attribute Reversed.VB_Description = "Reverses the seq in place"
    
    If s.Host.Count < FIRST_INDEX + 1 Then
        Set Reversed = Me
        Exit Function
    End If
     
    Dim myFirstIndex As Long: myFirstIndex = FIRST_INDEX
    Dim myLastIndex As Long: myLastIndex = s.Host.Count
    
    Do
    
        Me.Swap myFirstIndex, myLastIndex
        myFirstIndex = myFirstIndex + 1
        myLastIndex = myLastIndex - 1
    
    Loop Until myFirstIndex >= myLastIndex

    Set Reversed = Me

End Function


Public Function IsUnique() As Boolean

    If LacksItems Then
        IsUnique = False
        Exit Function
    End If
    
    Dim myS As cHashC: Set myS = New cHashC
    
    Dim myNode As SeqLNode
    Set myNode = s.Root
    
    Do
    
        If myS.Exists(myNode.Item) Then
            IsUnique = False
            Exit Function
        Else
            myS.Add myNode.Item
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

    IsUnique = True

End Function


Public Function IsNotUnique() As Boolean
    IsNotUnique = Not IsUnique
End Function


'@Description("Returns the a new seq with the unique subset of the host Seq")
Public Function Dedup() As SeqL
Attribute Dedup.VB_Description = "Returns the a new seq with the unique subset of the host Seq"

    Dim myS As SeqL: Set myS = SeqL.Deb
    
    If s.Root Is Nothing Then
        Set Dedup = myS
        Exit Function
    End If
    
    Select Case s.Host.Count
    
        Case Is < FIRST_INDEX:              Set Dedup = myS
            
        Case FIRST_INDEX:                   Set Dedup = Me.Clone
        
        Case Else
    
            Dim myNode As SeqLNode
            Set myNode = s.Root
            
            Do
            
                If myS.LacksItem(myNode.Item) Then
                    myS.Add myNode.Item
                End If
                
                Set myNode = myNode.Succ
                
            Loop Until myNode Is Nothing
                
            Set Dedup = myS
            
    End Select
    

    
End Function


'@Description("Removes duplicate items from the seq")
Public Function Deduped() As SeqL
Attribute Deduped.VB_Description = "Removes duplicate items from the seq"

    If LacksItems Then
        Set Deduped = Me
        Exit Function
    End If
    
    Dim myH As cHashC: Set myH = New cHashC
    
    Dim myNode As SeqLNode: Set myNode = s.Last
    Do
        If myH.Exists(myNode.Item) Then
        
            Dim myTmpNode As SeqLNode: Set myTmpNode = myNode
            Set myNode = myNode.Pred
            RemoveNode myTmpNode
            
        Else
        
            myH.Add myNode.Item
            Set myNode = myNode.Pred
        End If
        
       
        
    Loop Until myNode Is Nothing
    
    Set Deduped = Me
    
End Function


Public Function Freq() As KvpA

    Dim myK As KvpA: Set myK = KvpA.Deb
    Set Freq = myK
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If myK.HoldsItem(myNode.Item) Then
            myK.Item(myNode.Item) = myK.Item(myNode.Item) + 1
        Else
            myK.Add myNode.Item, 1
        End If
         
        Set myNode = myNode.Succ
         
    Loop Until myNode Is Nothing

    Set Freq = myK
    
End Function


Public Function SetOf(ByRef ipSet As e_SetoF, ByRef ipRangeItem As SeqL) As SeqL

    Select Case ipSet

        Case e_SetoF.m_Common:           Set SetOf = SetOfCommon(ipRangeItem)
        Case e_SetoF.m_HostOnly:         Set SetOf = SetOfHostOnly(ipRangeItem)
        Case e_SetoF.m_ParamOnly:        Set SetOf = SetOfParamOnly(ipRangeItem)
        Case e_SetoF.m_NotCommon:        Set SetOf = SetOfNotCommon(ipRangeItem)
        Case e_SetoF.m_Unique:           Set SetOf = SetofUnique(ipRangeItem)
        Case Else
            Err.Raise 17 + vbObjectError, _
            "VBALib.SeqL.SetOf", _
            Fmt.Text("Invalid e_set member. Expecting {0} to {1}. Got {2}", e_SetoF.m_First, e_SetoF.m_Last, ipSet)

    End Select

End Function



'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
' Private methods
'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
Private Function SetOfCommon(ByRef ipSeq As SeqL) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set SetOfCommon = myS
    
    If Me.LacksItems Or ipSeq.LacksItems Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    
    Do
        If ipSeq.HoldsItem(myNode.Item) Then
            myS.Add myNode.Item
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

    Set SetOfCommon = myS

End Function


Private Function SetOfHostOnly(ByRef ipSeq As SeqL) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set SetOfHostOnly = myS
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Set myS = Me.Dedup
    
    If ipSeq.LacksItems Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If ipSeq.HoldsItem(myNode.Item) Then
            myS.RemoveAll myNode.Item
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing
    
    Set SetOfHostOnly = myS
    
End Function


Private Function SetOfParamOnly(ByRef ipSeq As SeqL) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set SetOfParamOnly = myS
    
    If ipSeq.LacksItems Then
        Exit Function
    End If
    
    Set myS = ipSeq.Dedup
    
    If Me.LacksItems Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If myS.HoldsItem(myNode.Item) Then
            myS.RemoveAll myNode.Item
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing
    
    Set SetOfParamOnly = myS
    
End Function


Private Function SetOfNotCommon(ByRef ipSeq As SeqL) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set SetOfNotCommon = myS
    
    If LacksItems And ipSeq.LacksItems Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode: Set myNode = s.Root
    Do
    
        If ipSeq.LacksItem(myNode.Item) Then
            If myS.LacksItem(myNode.Item) Then
                myS.Add myNode.Item
            End If
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing
    
    Dim myItems As IterItems: Set myItems = IterItems(ipSeq)
    Do
    
        If Me.LacksItem(myItems.CurItem(0)) Then
            If myS.LacksItem(myItems.CurItem(0)) Then
                myS.Add myItems.CurItem(0)
            End If
        End If
        
    Loop While myItems.MoveNext
    
    Set SetOfNotCommon = myS

End Function


Private Function SetofUnique(ByRef ipSeq As SeqL) As SeqL

    Dim myS As SeqL: Set myS = SeqL.Deb
    Set SetofUnique = myS
    
    If Me.LacksItems And ipSeq.LacksItems Then
        Exit Function
    End If
    
    Set myS = Me.Dedup
    
    Dim myItems As IterItems: Set myItems = IterItems(ipSeq)
    Do
    
        If myS.LacksItem(myItems.CurItem(0)) Then
            myS.Add myItems.CurItem(0)
        End If
        
    Loop While myItems.MoveNext
    
    Set SetofUnique = myS

End Function


Private Function GetNodeAt(ByRef ipIndex As Long) As SeqLNode

    Dim myNode As SeqLNode: Set myNode = s.Root
    
    Dim myCount As Long
    myCount = 1
    
    Do
        
        If myCount = ipIndex Then
            Set GetNodeAt = myNode
            Exit Function
        End If
        
        Set myNode = myNode.Succ
        myCount = myCount + 1
        
    Loop Until myNode Is Nothing

    Set GetNodeAt = Nothing
    
End Function


Private Function GetNodeInfo(ByRef ipItem As Variant) As KVPair

    Set GetNodeInfo = KVPair(-1, Nothing)
    
    If s.Root Is Nothing Then
        Exit Function
    End If
    
    Dim myNode As SeqLNode
    Set myNode = s.Root
    
    Dim myIndex As Long
    myIndex = 0
    
    Do
    
        myIndex = myIndex + 1
        
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
            Set GetNodeInfo = KVPair(myIndex, myNode)
            Exit Function
        End If
        
        Set myNode = myNode.Succ
        
    Loop Until myNode Is Nothing

    
End Function

'@Description("Add the node to the end of the node list")
Private Sub AppendNode(ByRef ipNode As SeqLNode)
Attribute AppendNode.VB_Description = "Add the node to the end of the node list"

    Set ipNode.Pred = s.Last
    Set ipNode.Succ = Nothing
    Set s.Last.Succ = ipNode
    Set s.Last = ipNode
    
End Sub

'@Description("Insert the new node in the node list before the current node")
Private Sub InsertNode(ByRef ipIndex As Long, ByRef ipNewNode As SeqLNode)
Attribute InsertNode.VB_Description = "Insert the new node in the node list before the current node"

    Dim myCurNode As SeqLNode: Set myCurNode = GetNodeAt(ipIndex)
    
    Set ipNewNode.Pred = myCurNode.Pred
    Set ipNewNode.Succ = myCurNode
    
    Set myCurNode.Pred = ipNewNode
    Set ipNewNode.Pred.Succ = ipNewNode
    
End Sub
'@Description("Inserts newnode at the start of the node list")
Private Sub PrependNode(ByRef ipNode As SeqLNode)
Attribute PrependNode.VB_Description = "Inserts newnode at the start of the node list"

    Set ipNode.Pred = Nothing
    Set ipNode.Succ = s.Root
    Set s.Root.Pred = ipNode
    Set s.Root = ipNode

End Sub
'@Ignore ProcedureCanBeWrittenAsFunction
Private Sub RemoveNode(ByRef ipNode As SeqLNode)

    If ipNode Is Nothing Then
        Exit Sub
    End If
    
    
    
    If s.Host.Count = 1 Then
        Set s.Root = Nothing
        Set s.Last = Nothing
        s.Host.Count = s.Host.Count - 1
        Exit Sub
    End If
    
    '@Ignore VariableNotUsed
    Dim myTmp As SeqLNode:
    ' case of first node
    If ipNode.Pred Is Nothing Then
        Set myTmp = ipNode
        Set s.Root = ipNode.Succ
        Set s.Root.Pred = Nothing
        Set myTmp = Nothing
        s.Host.Count = s.Host.Count - 1
        Exit Sub
    End If
    
    ' case of last node
    If ipNode.Succ Is Nothing Then
        Set myTmp = ipNode
        Set s.Last = ipNode.Pred
        Set s.Last.Succ = Nothing
        Set myTmp = Nothing
        s.Host.Count = s.Host.Count - 1
        Exit Sub
    End If

    '@Ignore AssignmentNotUsed
    Set myTmp = ipNode
    Set ipNode.Pred.Succ = ipNode.Succ
    Set ipNode.Succ.Pred = ipNode.Pred
    Set myTmp = Nothing
    s.Host.Count = s.Host.Count - 1
    
End Sub

Private Sub RemoveAllItems()

    Dim myNode As SeqLNode: Set myNode = s.Last
    
    Do
    
        '@Ignore VariableNotUsed
        Dim myTmpNode As SeqLNode: Set myTmpNode = myNode
        
        Set myNode = myNode.Pred
        Set myTmpNode = Nothing
        
    Loop Until myNode Is Nothing
    
    Set s.Last = Nothing
    Set s.Root = Nothing
    s.Host.Count = 0
    
End Sub


Private Sub RemoveAllSingleItem(ByRef ipItem As Variant)

    Dim myNode As SeqLNode: Set myNode = s.Last

    Do
        
        If ComparerHelpers.Equals(myNode.Item, ipItem) Then
           
            Dim myTmp As SeqLNode
            Set myTmp = myNode
            Set myNode = myNode.Pred
            RemoveNode myTmp
            
        Else
        
            Set myNode = myNode.Pred
        
        End If
        
    Loop Until myNode Is Nothing
  
End Sub
